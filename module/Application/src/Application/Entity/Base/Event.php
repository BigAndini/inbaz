<?php

/**
 * Auto generated by MySQL Workbench Schema Exporter.
 * Version 2.1.6-dev (doctrine2-mappedsuperclass) on 2017-01-16 22:18:34.
 * Goto https://github.com/johmue/mysql-workbench-schema-exporter for more
 * information.
 */

namespace Application\Entity\Base;

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Zend\Form\Annotation;;

/**
 * Application\Entity\Base\Event
 *
 * @Annotation\Name("Event")
 *
 * @ORM\MappedSuperclass
 * @ORM\Table(name="event", indexes={@ORM\Index(name="fk_event_role1_idx", columns={"role_id"})})
 * @ORM\HasLifecycleCallbacks
 */
class Event extends \Application\Entity\EntityValidation
{
    /**
     * @ORM\Id
     * @ORM\Column(type="integer")
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    protected $id;

    /**
     * @ORM\Column(type="integer")
     */
    protected $role_id;

    /**
     * @Annotation\Type("Zend\Form\Element\Text")
     * @Annotation\Options({"label":"Name:"})
     *
     * @ORM\Column(type="text")
     */
    protected $heading;

    /**
     * @Annotation\Type("Zend\Form\Element\Text")
     * @Annotation\Options({"label":"Beginn:"})
     *
     * @ORM\Column(name="`begin`", type="datetime")
     */
    protected $begin;

    /**
     * @Annotation\Type("Zend\Form\Element\Text")
     * @Annotation\Options({"label":"Ende:"})
     *
     * @ORM\Column(name="`end`", type="datetime")
     */
    protected $end;

    /**
     * @Annotation\Type("Zend\Form\Element\Checkbox")
     * @Annotation\Options({"label":"sichbar?:"})
     *
     * @ORM\Column(type="boolean", nullable=true)
     */
    protected $visible;

    /**
     * @Annotation\Type("Zend\Form\Element\Text")
     * @Annotation\Options({"label":"Kontakt:"})
     *
     * @ORM\Column(type="string", length=255, nullable=true)
     */
    protected $contact;

    /**
     * @Annotation\Type("Zend\Form\Element\Text")
     * @Annotation\Options({"label":"E-Mail Adresse:"})
     *
     * @ORM\Column(type="string", length=255, nullable=true)
     */
    protected $email;

    /**
     * @Annotation\Type("Zend\Form\Element\Text")
     * @Annotation\Options({"label":"Webseite:"})
     *
     * @ORM\Column(type="string", length=255, nullable=true)
     */
    protected $website;

    /**
     * @Annotation\Type("Zend\Form\Element\Textarea")
     * @Annotation\Options({"label":"Beschreibung:"})
     *
     * @ORM\Column(type="string", length=3000, nullable=true)
     */
    protected $description;

    /**
     * @ORM\Column(type="datetime", nullable=true)
     */
    protected $updated;

    /**
     * @ORM\Column(type="datetime", nullable=true)
     */
    protected $created;

    /**
     * @ORM\OneToMany(targetEntity="EventAdditive", mappedBy="event")
     * @ORM\JoinColumn(name="id", referencedColumnName="event_id")
     */
    protected $eventAdditives;

    /**
     * @Annotation\Name("Event")
     *
     * @ORM\ManyToOne(targetEntity="Role", inversedBy="events")
     * @ORM\JoinColumn(name="role_id", referencedColumnName="id")
     */
    protected $role;

    /**
     * @ORM\ManyToMany(targetEntity="Calendar", mappedBy="events")
     */
    protected $calendars;

    public function __construct()
    {
        $this->eventAdditives = new ArrayCollection();
        $this->calendars = new ArrayCollection();
    }

    /**
     * @ORM\PrePersist
     */
    public function PrePersist()
    {
        if(!isset($this->created)) {
            $this->created = new \DateTime();
        }
        $this->updated = new \DateTime();
    }

    /**
     * @ORM\PreUpdate
     */
    public function PreUpdate()
    {
        $this->updated = new \DateTime();
    }

    /**
     * Set the value of id.
     *
     * @param integer $id
     * @return \Application\Entity\Base\Event
     */
    public function setId($id)
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Get the value of id.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set the value of role_id.
     *
     * @param integer $role_id
     * @return \Application\Entity\Base\Event
     */
    public function setRoleId($role_id)
    {
        $this->role_id = $role_id;

        return $this;
    }

    /**
     * Get the value of role_id.
     *
     * @return integer
     */
    public function getRoleId()
    {
        return $this->role_id;
    }

    /**
     * Set the value of heading.
     *
     * @param string $heading
     * @return \Application\Entity\Base\Event
     */
    public function setHeading($heading)
    {
        $this->heading = $heading;

        return $this;
    }

    /**
     * Get the value of heading.
     *
     * @return string
     */
    public function getHeading()
    {
        return $this->heading;
    }

    /**
     * Set the value of begin.
     *
     * @param \DateTime $begin
     * @return \Application\Entity\Base\Event
     */
    public function setBegin($begin)
    {
        $this->begin = $begin;

        return $this;
    }

    /**
     * Get the value of begin.
     *
     * @return \DateTime
     */
    public function getBegin()
    {
        return $this->begin;
    }

    /**
     * Set the value of end.
     *
     * @param \DateTime $end
     * @return \Application\Entity\Base\Event
     */
    public function setEnd($end)
    {
        $this->end = $end;

        return $this;
    }

    /**
     * Get the value of end.
     *
     * @return \DateTime
     */
    public function getEnd()
    {
        return $this->end;
    }

    /**
     * Set the value of visible.
     *
     * @param boolean $visible
     * @return \Application\Entity\Base\Event
     */
    public function setVisible($visible)
    {
        $this->visible = $visible;

        return $this;
    }

    /**
     * Get the value of visible.
     *
     * @return boolean
     */
    public function getVisible()
    {
        return $this->visible;
    }

    /**
     * Set the value of contact.
     *
     * @param string $contact
     * @return \Application\Entity\Base\Event
     */
    public function setContact($contact)
    {
        $this->contact = $contact;

        return $this;
    }

    /**
     * Get the value of contact.
     *
     * @return string
     */
    public function getContact()
    {
        return $this->contact;
    }

    /**
     * Set the value of email.
     *
     * @param string $email
     * @return \Application\Entity\Base\Event
     */
    public function setEmail($email)
    {
        $this->email = $email;

        return $this;
    }

    /**
     * Get the value of email.
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->email;
    }

    /**
     * Set the value of website.
     *
     * @param string $website
     * @return \Application\Entity\Base\Event
     */
    public function setWebsite($website)
    {
        $this->website = $website;

        return $this;
    }

    /**
     * Get the value of website.
     *
     * @return string
     */
    public function getWebsite()
    {
        return $this->website;
    }

    /**
     * Set the value of description.
     *
     * @param string $description
     * @return \Application\Entity\Base\Event
     */
    public function setDescription($description)
    {
        $this->description = $description;

        return $this;
    }

    /**
     * Get the value of description.
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->description;
    }

    /**
     * Set the value of updated.
     *
     * @param \DateTime $updated
     * @return \Application\Entity\Base\Event
     */
    public function setUpdated($updated)
    {
        $this->updated = $updated;

        return $this;
    }

    /**
     * Get the value of updated.
     *
     * @return \DateTime
     */
    public function getUpdated()
    {
        return $this->updated;
    }

    /**
     * Set the value of created.
     *
     * @param \DateTime $created
     * @return \Application\Entity\Base\Event
     */
    public function setCreated($created)
    {
        $this->created = $created;

        return $this;
    }

    /**
     * Get the value of created.
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->created;
    }

    /**
     * Add EventAdditive entity to collection (one to many).
     *
     * @param \Application\Entity\Base\EventAdditive $eventAdditive
     * @return \Application\Entity\Base\Event
     */
    public function addEventAdditive(EventAdditive $eventAdditive)
    {
        $this->eventAdditives[] = $eventAdditive;

        return $this;
    }

    /**
     * Remove EventAdditive entity from collection (one to many).
     *
     * @param \Application\Entity\Base\EventAdditive $eventAdditive
     * @return \Application\Entity\Base\Event
     */
    public function removeEventAdditive(EventAdditive $eventAdditive)
    {
        $this->eventAdditives->removeElement($eventAdditive);

        return $this;
    }

    /**
     * Get EventAdditive entity collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getEventAdditives()
    {
        return $this->eventAdditives;
    }

    /**
     * Set Role entity (many to one).
     *
     * @param \Application\Entity\Base\Role $role
     * @return \Application\Entity\Base\Event
     */
    public function setRole(Role $role = null)
    {
        $this->role = $role;

        return $this;
    }

    /**
     * Get Role entity (many to one).
     *
     * @return \Application\Entity\Base\Role
     */
    public function getRole()
    {
        return $this->role;
    }

    /**
     * Add Calendar entity to collection.
     *
     * @param \Application\Entity\Base\Calendar $calendar
     * @return \Application\Entity\Base\Event
     */
    public function addCalendar(Calendar $calendar)
    {
        $this->calendars[] = $calendar;

        return $this;
    }

    /**
     * Remove Calendar entity from collection.
     *
     * @param \Application\Entity\Base\Calendar $calendar
     * @return \Application\Entity\Base\Event
     */
    public function removeCalendar(Calendar $calendar)
    {
        $this->calendars->removeElement($calendar);

        return $this;
    }

    /**
     * Get Calendar entity collection.
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getCalendars()
    {
        return $this->calendars;
    }

    /**
     * Populate entity with the given data.
     * The set* method will be used to set the data.
     *
     * @param array $data
     * @return boolean
     */
    public function populate(array $data = array())
    {
        foreach ($data as $field => $value) {
            $setter = sprintf('set%s', ucfirst(
                str_replace(' ', '', ucwords(str_replace('_', ' ', $field)))
            ));
            if (method_exists($this, $setter)) {
                $this->{$setter}($value);
            }
        }

        return true;
    }

    /**
     * Return a array with all fields and data.
     * Default the relations will be ignored.
     * 
     * @param array $fields
     * @return array
     */
    public function getArrayCopy(array $fields = array())
    {
        $dataFields = array('id', 'role_id', 'heading', 'begin', 'end', 'visible', 'contact', 'email', 'website', 'description', 'updated', 'created');
        $relationFields = array('role');
        $copiedFields = array();
        foreach ($relationFields as $relationField) {
            $map = null;
            if (array_key_exists($relationField, $fields)) {
                $map = $fields[$relationField];
                $fields[] = $relationField;
                unset($fields[$relationField]);
            }
            if (!in_array($relationField, $fields)) {
                continue;
            }
            $getter = sprintf('get%s', ucfirst(str_replace(' ', '', ucwords(str_replace('_', ' ', $relationField)))));
            $relationEntity = $this->{$getter}();
            $copiedFields[$relationField] = (!is_null($map))
                ? $relationEntity->getArrayCopy($map)
                : $relationEntity->getArrayCopy();
            $fields = array_diff($fields, array($relationField));
        }
        foreach ($dataFields as $dataField) {
            if (!in_array($dataField, $fields) && !empty($fields)) {
                continue;
            }
            $getter = sprintf('get%s', ucfirst(str_replace(' ', '', ucwords(str_replace('_', ' ', $dataField)))));
            $copiedFields[$dataField] = $this->{$getter}();
        }

        return $copiedFields;
    }

    public function __sleep()
    {
        return array('id', 'role_id', 'heading', 'begin', 'end', 'visible', 'contact', 'email', 'website', 'description', 'updated', 'created');
    }
}