<?php

/**
 * Auto generated by MySQL Workbench Schema Exporter.
 * Version 2.1.6-dev (doctrine2-annotation) on 2015-09-26 01:29:08.
 * Goto https://github.com/johmue/mysql-workbench-schema-exporter for more
 * information.
 */

namespace Application\Entity\BaseEntity;

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;

/**
 * Application\Entity\BaseEntity\Event
 *
 * @ORM\MappedSuperclass()
 * @ORM\Table(name="event", indexes={@ORM\Index(name="fk_event_address1_idx", columns={"location_id"})})
 */
class Event
{
    /**
     * @ORM\Id
     * @ORM\Column(type="integer")
     */
    protected $id;

    /**
     * @ORM\Column(name="`begin`", type="datetime")
     */
    protected $begin;

    /**
     * @ORM\Column(name="`end`", type="datetime")
     */
    protected $end;

    /**
     * @ORM\Column(type="text")
     */
    protected $heading;

    /**
     * @ORM\Column(type="integer")
     */
    protected $location_id;

    /**
     * @ORM\Column(type="integer")
     */
    protected $contact_id;

    /**
     * @ORM\Column(type="boolean", nullable=true)
     */
    protected $contact_visible;

    /**
     * @ORM\Column(type="string", length=255, nullable=true)
     */
    protected $website;

    /**
     * @ORM\Column(type="integer")
     */
    protected $group_id;

    /**
     * @ORM\Column(type="boolean", nullable=true)
     */
    protected $visible;

    /**
     * @ORM\Column(type="datetime", nullable=true)
     */
    protected $created;

    /**
     * @ORM\Column(type="datetime", nullable=true)
     */
    protected $updated;

    /**
     * @ORM\ManyToOne(targetEntity="Address", inversedBy="events")
     * @ORM\JoinColumn(name="location_id", referencedColumnName="id")
     */
    protected $address;

    /**
     * @ORM\ManyToMany(targetEntity="Calendar", inversedBy="events")
     * @ORM\JoinTable(name="event2calendar",
     *     joinColumns={@ORM\JoinColumn(name="event_id", referencedColumnName="id")},
     *     inverseJoinColumns={@ORM\JoinColumn(name="calendar_id", referencedColumnName="id")}
     * )
     */
    protected $calendars;

    /**
     * @ORM\ManyToMany(targetEntity="Icon", inversedBy="events")
     * @ORM\JoinTable(name="eventType",
     *     joinColumns={@ORM\JoinColumn(name="event_id", referencedColumnName="id")},
     *     inverseJoinColumns={@ORM\JoinColumn(name="icon_id", referencedColumnName="id")}
     * )
     */
    protected $icons;

    public function __construct()
    {
        $this->calendars = new ArrayCollection();
        $this->icons = new ArrayCollection();
    }

    /**
     * Set the value of id.
     *
     * @param integer $id
     * @return \Application\Entity\BaseEntity\Event
     */
    public function setId($id)
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Get the value of id.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set the value of begin.
     *
     * @param \DateTime $begin
     * @return \Application\Entity\BaseEntity\Event
     */
    public function setBegin($begin)
    {
        $this->begin = $begin;

        return $this;
    }

    /**
     * Get the value of begin.
     *
     * @return \DateTime
     */
    public function getBegin()
    {
        return $this->begin;
    }

    /**
     * Set the value of end.
     *
     * @param \DateTime $end
     * @return \Application\Entity\BaseEntity\Event
     */
    public function setEnd($end)
    {
        $this->end = $end;

        return $this;
    }

    /**
     * Get the value of end.
     *
     * @return \DateTime
     */
    public function getEnd()
    {
        return $this->end;
    }

    /**
     * Set the value of heading.
     *
     * @param string $heading
     * @return \Application\Entity\BaseEntity\Event
     */
    public function setHeading($heading)
    {
        $this->heading = $heading;

        return $this;
    }

    /**
     * Get the value of heading.
     *
     * @return string
     */
    public function getHeading()
    {
        return $this->heading;
    }

    /**
     * Set the value of location_id.
     *
     * @param integer $location_id
     * @return \Application\Entity\BaseEntity\Event
     */
    public function setLocationId($location_id)
    {
        $this->location_id = $location_id;

        return $this;
    }

    /**
     * Get the value of location_id.
     *
     * @return integer
     */
    public function getLocationId()
    {
        return $this->location_id;
    }

    /**
     * Set the value of contact_id.
     *
     * @param integer $contact_id
     * @return \Application\Entity\BaseEntity\Event
     */
    public function setContactId($contact_id)
    {
        $this->contact_id = $contact_id;

        return $this;
    }

    /**
     * Get the value of contact_id.
     *
     * @return integer
     */
    public function getContactId()
    {
        return $this->contact_id;
    }

    /**
     * Set the value of contact_visible.
     *
     * @param boolean $contact_visible
     * @return \Application\Entity\BaseEntity\Event
     */
    public function setContactVisible($contact_visible)
    {
        $this->contact_visible = $contact_visible;

        return $this;
    }

    /**
     * Get the value of contact_visible.
     *
     * @return boolean
     */
    public function getContactVisible()
    {
        return $this->contact_visible;
    }

    /**
     * Set the value of website.
     *
     * @param string $website
     * @return \Application\Entity\BaseEntity\Event
     */
    public function setWebsite($website)
    {
        $this->website = $website;

        return $this;
    }

    /**
     * Get the value of website.
     *
     * @return string
     */
    public function getWebsite()
    {
        return $this->website;
    }

    /**
     * Set the value of group_id.
     *
     * @param integer $group_id
     * @return \Application\Entity\BaseEntity\Event
     */
    public function setGroupId($group_id)
    {
        $this->group_id = $group_id;

        return $this;
    }

    /**
     * Get the value of group_id.
     *
     * @return integer
     */
    public function getGroupId()
    {
        return $this->group_id;
    }

    /**
     * Set the value of visible.
     *
     * @param boolean $visible
     * @return \Application\Entity\BaseEntity\Event
     */
    public function setVisible($visible)
    {
        $this->visible = $visible;

        return $this;
    }

    /**
     * Get the value of visible.
     *
     * @return boolean
     */
    public function getVisible()
    {
        return $this->visible;
    }

    /**
     * Set the value of created.
     *
     * @param \DateTime $created
     * @return \Application\Entity\BaseEntity\Event
     */
    public function setCreated($created)
    {
        $this->created = $created;

        return $this;
    }

    /**
     * Get the value of created.
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->created;
    }

    /**
     * Set the value of updated.
     *
     * @param \DateTime $updated
     * @return \Application\Entity\BaseEntity\Event
     */
    public function setUpdated($updated)
    {
        $this->updated = $updated;

        return $this;
    }

    /**
     * Get the value of updated.
     *
     * @return \DateTime
     */
    public function getUpdated()
    {
        return $this->updated;
    }

    /**
     * Set Address entity (many to one).
     *
     * @param \Application\Entity\BaseEntity\Address $address
     * @return \Application\Entity\BaseEntity\Event
     */
    public function setAddress(Address $address = null)
    {
        $this->address = $address;

        return $this;
    }

    /**
     * Get Address entity (many to one).
     *
     * @return \Application\Entity\BaseEntity\Address
     */
    public function getAddress()
    {
        return $this->address;
    }

    /**
     * Add Calendar entity to collection.
     *
     * @param \Application\Entity\BaseEntity\Calendar $calendar
     * @return \Application\Entity\BaseEntity\Event
     */
    public function addCalendar(Calendar $calendar)
    {
        $calendar->addEvent($this);
        $this->calendars[] = $calendar;

        return $this;
    }

    /**
     * Remove Calendar entity from collection.
     *
     * @param \Application\Entity\BaseEntity\Calendar $calendar
     * @return \Application\Entity\BaseEntity\Event
     */
    public function removeCalendar(Calendar $calendar)
    {
        $calendar->removeEvent($this);
        $this->calendars->removeElement($calendar);

        return $this;
    }

    /**
     * Get Calendar entity collection.
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getCalendars()
    {
        return $this->calendars;
    }

    /**
     * Add Icon entity to collection.
     *
     * @param \Application\Entity\BaseEntity\Icon $icon
     * @return \Application\Entity\BaseEntity\Event
     */
    public function addIcon(Icon $icon)
    {
        $icon->addEvent($this);
        $this->icons[] = $icon;

        return $this;
    }

    /**
     * Remove Icon entity from collection.
     *
     * @param \Application\Entity\BaseEntity\Icon $icon
     * @return \Application\Entity\BaseEntity\Event
     */
    public function removeIcon(Icon $icon)
    {
        $icon->removeEvent($this);
        $this->icons->removeElement($icon);

        return $this;
    }

    /**
     * Get Icon entity collection.
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getIcons()
    {
        return $this->icons;
    }

    public function __sleep()
    {
        return array('id', 'begin', 'end', 'heading', 'location_id', 'contact_id', 'contact_visible', 'website', 'group_id', 'visible', 'created', 'updated');
    }
}