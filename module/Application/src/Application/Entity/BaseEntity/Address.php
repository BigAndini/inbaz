<?php

/**
 * Auto generated by MySQL Workbench Schema Exporter.
 * Version 2.1.6-dev (doctrine2-annotation) on 2015-09-26 01:29:08.
 * Goto https://github.com/johmue/mysql-workbench-schema-exporter for more
 * information.
 */

namespace Application\Entity\BaseEntity;

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;

/**
 * Application\Entity\BaseEntity\Address
 *
 * @ORM\MappedSuperclass()
 * @ORM\Table(name="address")
 */
class Address
{
    /**
     * @ORM\Id
     * @ORM\Column(type="integer")
     */
    protected $id;

    /**
     * @ORM\Column(type="string", length=45, nullable=true)
     */
    protected $street;

    /**
     * @ORM\Column(type="string", length=45, nullable=true)
     */
    protected $housenumber;

    /**
     * @ORM\Column(type="string", length=45, nullable=true)
     */
    protected $zipcode;

    /**
     * @ORM\Column(type="string", length=45, nullable=true)
     */
    protected $city;

    /**
     * @ORM\Column(type="string", length=45, nullable=true)
     */
    protected $country;

    /**
     * @ORM\Column(type="string", length=45, nullable=true)
     */
    protected $updated;

    /**
     * @ORM\Column(type="string", length=45, nullable=true)
     */
    protected $created;

    /**
     * @ORM\Column(type="integer")
     */
    protected $group_id;

    /**
     * @ORM\OneToMany(targetEntity="Event", mappedBy="address")
     * @ORM\JoinColumn(name="id", referencedColumnName="location_id")
     */
    protected $events;

    public function __construct()
    {
        $this->events = new ArrayCollection();
    }

    /**
     * Set the value of id.
     *
     * @param integer $id
     * @return \Application\Entity\BaseEntity\Address
     */
    public function setId($id)
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Get the value of id.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set the value of street.
     *
     * @param string $street
     * @return \Application\Entity\BaseEntity\Address
     */
    public function setStreet($street)
    {
        $this->street = $street;

        return $this;
    }

    /**
     * Get the value of street.
     *
     * @return string
     */
    public function getStreet()
    {
        return $this->street;
    }

    /**
     * Set the value of housenumber.
     *
     * @param string $housenumber
     * @return \Application\Entity\BaseEntity\Address
     */
    public function setHousenumber($housenumber)
    {
        $this->housenumber = $housenumber;

        return $this;
    }

    /**
     * Get the value of housenumber.
     *
     * @return string
     */
    public function getHousenumber()
    {
        return $this->housenumber;
    }

    /**
     * Set the value of zipcode.
     *
     * @param string $zipcode
     * @return \Application\Entity\BaseEntity\Address
     */
    public function setZipcode($zipcode)
    {
        $this->zipcode = $zipcode;

        return $this;
    }

    /**
     * Get the value of zipcode.
     *
     * @return string
     */
    public function getZipcode()
    {
        return $this->zipcode;
    }

    /**
     * Set the value of city.
     *
     * @param string $city
     * @return \Application\Entity\BaseEntity\Address
     */
    public function setCity($city)
    {
        $this->city = $city;

        return $this;
    }

    /**
     * Get the value of city.
     *
     * @return string
     */
    public function getCity()
    {
        return $this->city;
    }

    /**
     * Set the value of country.
     *
     * @param string $country
     * @return \Application\Entity\BaseEntity\Address
     */
    public function setCountry($country)
    {
        $this->country = $country;

        return $this;
    }

    /**
     * Get the value of country.
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->country;
    }

    /**
     * Set the value of updated.
     *
     * @param string $updated
     * @return \Application\Entity\BaseEntity\Address
     */
    public function setUpdated($updated)
    {
        $this->updated = $updated;

        return $this;
    }

    /**
     * Get the value of updated.
     *
     * @return string
     */
    public function getUpdated()
    {
        return $this->updated;
    }

    /**
     * Set the value of created.
     *
     * @param string $created
     * @return \Application\Entity\BaseEntity\Address
     */
    public function setCreated($created)
    {
        $this->created = $created;

        return $this;
    }

    /**
     * Get the value of created.
     *
     * @return string
     */
    public function getCreated()
    {
        return $this->created;
    }

    /**
     * Set the value of group_id.
     *
     * @param integer $group_id
     * @return \Application\Entity\BaseEntity\Address
     */
    public function setGroupId($group_id)
    {
        $this->group_id = $group_id;

        return $this;
    }

    /**
     * Get the value of group_id.
     *
     * @return integer
     */
    public function getGroupId()
    {
        return $this->group_id;
    }

    /**
     * Add Event entity to collection (one to many).
     *
     * @param \Application\Entity\BaseEntity\Event $event
     * @return \Application\Entity\BaseEntity\Address
     */
    public function addEvent(Event $event)
    {
        $this->events[] = $event;

        return $this;
    }

    /**
     * Remove Event entity from collection (one to many).
     *
     * @param \Application\Entity\BaseEntity\Event $event
     * @return \Application\Entity\BaseEntity\Address
     */
    public function removeEvent(Event $event)
    {
        $this->events->removeElement($event);

        return $this;
    }

    /**
     * Get Event entity collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getEvents()
    {
        return $this->events;
    }

    public function __sleep()
    {
        return array('id', 'street', 'housenumber', 'zipcode', 'city', 'country', 'updated', 'created', 'group_id');
    }
}